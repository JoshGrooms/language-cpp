'fileTypes': [
  'cpp'
  'h'
  'hpp'
]
'name': 'C++'
'scopeName': 'source.cpp'
'patterns': [
  {
    'match': '^\\s*\\#\\s*(?:define)\\s+(\\w+)'
    'captures':
      '0':
        'name': 'preprocessor.define.cpp'
      '1':
        'name': 'preprocessor.define.name.cpp'
  }
  {
    'match': '^\\s*\\#\\s*(?:include)\\s+(?:([\\"\\\'][^\\\'\\"]+[\\"\\\'])|(\\<[^\\>]+\\>))'
    'captures':
      '0':
        'name': 'preprocessor.include.cpp'
      '1':
        'name': 'preprocessor.include.file.local.cpp'
      '2':
        'name': 'preprocessor.include.file.global.cpp'
  }
  {
    'match': '^\\s*\\#\\s*\\w+'
    'name': 'preprocessor.directive.cpp'
  }
  {
    'match': '(/\\*\\*)(.*)(\\*\\*/)\\r?\\n'
    'captures':
      '1':
        'name': 'comment.section.open.cpp'
      '2':
        'name': 'comment.section.title.cpp'
      '3':
        'name': 'comment.section.close.cpp'
    'name': 'comment.section.cpp'
  }
  {
    'begin': '(/\\*)\\s*([A-Z0-9_]+)\\s*(?=\\-)'
    'beginCaptures':
      '1':
        'name': 'comment.documentation.open.cpp'
      '2':
        'name': 'comment.documentation.title.cpp'
    'contentName': 'comment.documentation.content.cpp'
    'end': '\\*/'
    'endCaptures':
      '0':
        'name': 'comment.documentation.close.cpp'
    'patterns': [
      {
        'match': 'SYNTAX'
        'name': 'comment.documentation.syntax.cpp'
      }
      {
        'match': 'OUTPUT[S]?'
        'name': 'comment.documentation.output.cpp'
      }
      {
        'match': 'INPUT[S]?'
        'name': 'comment.documentation.input.cpp'
      }
      {
        'match': 'PROPERTY|PROPERTIES'
        'name': 'comment.documentation.properties.cpp'
      }
    ]
  }
  {
    'begin': '(/\\*)'
    'beginCaptures':
      '1':
        'name': 'comment.block.open.cpp'
    'end': '\\*/'
    'endCaptures':
      '0':
        'name': 'comment.block.close.cpp'
    'contentName': 'comment.block.content.cpp'
    'name': 'comment.block.cpp'
  }
  {
    'match': '(//)(.*)\\r?\\n'
    'captures':
      '1':
        'name': 'comment.line.open.cpp'
      '2':
        'name': 'comment.line.content.cpp'
    'name': 'comment.line.cpp'
  }
  {
    'match': '\\b(false|true)\\b'
    'name': 'literal.boolean.cpp'
  }
  {
    'match': '\\b(\\d*\\.\\d+(?:[eE][\\+\\-]?\\d+)?[lL]?)\\b'
    'captures':
      '1':
        'name': 'literal.float.double.cpp'
  }
  {
    'match': '\\b(\\d*\\.\\d+(?:[eE][\\+\\-]?\\d+)?[fF])\\b'
    'captures':
      '1':
        'name': 'literal.float.single.cpp'
  }
  {
    'match': '\\b(0[xX](?:[0-9]|[a-f]|[A-F])+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.hexadecimal.cpp'
  }
  {
    'match': '\\b(\\d+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.decimal.cpp'
  }
  {
    'match': '\\b(0[0-9]+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.octal.cpp'
  }
  {
    'match': '[\\"\\\'][\\"\\\']'
    'name': 'literal.string.cpp'
  }
  {
    'begin': '(L|u8|u|U)?([\\"\\\'])[^\\(]'
    'beginCaptures':
      '1':
        'name': 'literal.string.qualifier.cpp'
      '2':
        'name': 'enclosure.string.open.cpp'
    'end': '[\\"\\\']'
    'endCaptures':
      '0':
        'name': 'enclosure.string.close.cpp'
    'name': 'literal.string.cpp'
  }
  {
    'match': '(case|return)'
    'captures':
      '1':
        'name': 'keyword.control.cpp'
  }
  {
    'begin': 'new'
    'beginCaptures':
      '0':
        'name': 'operator.word.new.cpp'
    'end': '(\\()|(\\[)|(\\;)'
    'endCaptures':
      '1':
        'name': 'enclosure.group.open.cpp'
      '2':
        'name': 'enclosure.index.open.cpp'
      '3':
        'name': 'operator.character.line-terminator.cpp'
    'patterns': [
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'enclosure.generic.open.cpp'
        'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'endCaptures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
    ]
  }
  {
    'match': '\\b(alignof|delete|new|sizeof|typeid)\\b'
    'name': 'operator.word.cpp'
  }
  {
    'match': '\\b(class|struct|enum)\\b\\s*(?:\\r?\\n?)(\\{)'
    'captures':
      '1':
        'name': 'keyword.type.cpp'
      '2':
        'name': 'operator.block.open.cpp'
    'name': 'type.declaration.anonymous.cpp'
  }
  {
    'begin': '\\b(class)\\b\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.type.cpp'
    'end': '(?<=[{;])|(;)|({)'
    'endCaptures':
      '1':
        'name': 'operator.character.line-terminator.cpp'
      '2':
        'name': 'enclosure.block.open.cpp'
    'name': 'type.declaration.class.cpp'
    'patterns': [
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'enclosure.generic.open.cpp'
        'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'endCaptures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
      {
        'begin': '\\s*(\\:)\\s*'
        'beginCaptures':
          '1':
            'name': 'operator.character.inherit.cpp'
        'end': '(\\{)'
        'endCaptures':
          '1':
            'name': 'operator.character.separator.cpp'
          '2':
            'name': 'enclosure.block.open.cpp'
        'patterns': [
          {
            'match': 'private|protected|public'
            'name': 'keyword.qualifier.access.cpp'
          }
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'enclosure.generic.open.cpp'
            'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'endCaptures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
            'patterns': [
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
              {
                'match': '\\,'
                'name': 'operator.character.separator.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
    ]
  }
  {
    'begin': '\\b(namespace)\\b\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.type.cpp'
    'end': '\\{'
    'endCaptures':
      '0':
        'name': 'enclosure.block.open.cpp'
    'name': 'type.declaration.namespace.cpp'
    'patterns': [
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
    ]
  }
  {
    'begin': '\\b(struct)\\b\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.type.cpp'
    'end': '(\\;)|(?=\\{)'
    'endCaptures':
      '1':
        'name': 'operator.character.line-terminator.cpp'
      '2':
        'name': 'enclosure.block.open.cpp'
    'name': 'type.declaration.struct.cpp'
    'patterns': [
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'enclosure.generic.open.cpp'
        'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'endCaptures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
      {
        'begin': '\\s*(\\:)\\s*'
        'beginCaptures':
          '1':
            'name': 'operator.character.inherit.cpp'
        'end': '(\\{)'
        'endCaptures':
          '1':
            'name': 'operator.character.separator.cpp'
          '2':
            'name': 'enclosure.block.open.cpp'
        'patterns': [
          {
            'match': 'private|protected|public'
            'name': 'keyword.qualifier.access.cpp'
          }
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'enclosure.generic.open.cpp'
            'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'endCaptures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
            'patterns': [
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
              {
                'match': '\\,'
                'name': 'operator.character.separator.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
    ]
  }
  {
    'begin': '(using)\\s+(?:(\\w+)\\s*(\\=)\\s*)?'
    'beginCaptures':
      '1':
        'name': 'keyword.control.cpp'
      '2':
        'name': 'variable.name.alias.cpp'
      '3':
        'name': 'operator.character.assignment.cpp'
    'end': '\\;'
    'endCaptures':
      '0':
        'name': 'operator.character.line-terminator.cpp'
    'name': 'type.declaration.alias.cpp'
    'patterns': [
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'enclosure.generic.open.cpp'
        'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'endCaptures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
    ]
  }
  {
    'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?\\s*\\b(\\w+)\\b(\\<)'
    'beginCaptures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'type.name.cpp'
      '6':
        'name': 'enclosure.generic.open.cpp'
    'end': '(\\;)|(\\{)|(\\()'
    'endCaptures':
      '1':
        'name': 'operator.character.line-terminator.cpp'
      '2':
        'name': 'enclosure.block.open.cpp'
      '3':
        'name': 'enclosure.group.open.cpp'
    'name': 'function.declaration.generic.cpp'
    'patterns': [
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'variable.argument.generic.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'variable.argument.generic.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
      {
        'match': '\\,'
        'name': 'operator.character.separator.cpp'
      }
      {
        'begin': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*(?:\\b(\\w+)\\b(\\:\\:))?\\b(\\w+)\\b\\s*(\\()\\s*'
        'beginCaptures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
          '4':
            'name': 'type.name.cpp'
          '5':
            'name': 'operator.character.resolution.cpp'
          '6':
            'name': 'function.name.cpp'
          '7':
            'name': 'enclosure.group.open.cpp'
        'end': '(\\))(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?'
        'endCaptures':
          '1':
            'name': 'enclosure.group.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'keyword.qualifier.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'keyword.qualifier.cpp'
              '6':
                'name': 'type.primitive.cpp'
              '7':
                'name': 'keyword.qualifier.cpp'
              '8':
                'name': 'operator.character.cpp'
              '9':
                'name': 'variable.argument.input.cpp'
            'name': 'function.argument.input.cpp'
          }
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp'
            'end': '(?<=[\\&\\*\\s])\\b(\\w+)\\b'
            'endCaptures':
              '1':
                'name': 'variable.argument.input.cpp'
            'name': 'function.argument.input.cpp'
            'patterns': [
              {
                'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
                'beginCaptures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'enclosure.generic.open.cpp'
                'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'endCaptures':
                  '1':
                    'name': 'enclosure.generic.close.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'operator.character.cpp'
                'patterns': [
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'variable.argument.generic.cpp'
                      '6':
                        'name': 'operator.character.resolution.cpp;.cpp'
                  }
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'variable.argument.generic.cpp'
                      '6':
                        'name': 'keyword.qualifier.cpp'
                      '7':
                        'name': 'operator.character.cpp'
                  }
                  {
                    'match': '\\,'
                    'name': 'operator.character.separator.cpp'
                  }
                ]
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
            'captures':
              '0':
                'name': 'function.argument.input.cpp'
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
              '8':
                'name': 'variable.argument.input.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b\\s*'
        'captures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'operator.character.cpp'
          '4':
            'name': 'variable.name.cpp'
      }
      {
        'match': '(\\>)(\\:\\:)(\\w+)\\s*(\\w+)'
        'captures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'operator.character.resolution.cpp'
          '3':
            'name': 'type.name.cpp'
          '4':
            'name': 'variable.name.cpp'
      }
      {
        'match': '(\\>)(\\:\\:)(\\w+)'
        'captures':
          '1':
            'name': 'enclosure.generic.close.cpp'
          '2':
            'name': 'operator.character.resolution.cpp'
          '3':
            'name': 'type.name.cpp'
      }
      {
        'match': '(\\>)'
        'name': 'enclosure.generic.close.cpp'
      }
    ]
  }
  {
    'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*(?:\\b(\\w+)\\b(\\:\\:))?\\b(\\w+)\\b\\s*(\\()\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'keyword.qualifier.cpp'
      '6':
        'name': 'type.primitive.cpp'
      '7':
        'name': 'keyword.qualifier.cpp'
      '8':
        'name': 'operator.character.cpp'
      '9':
        'name': 'type.name.cpp'
      '10':
        'name': 'operator.character.resolution.cpp'
      '11':
        'name': 'function.name.cpp'
      '12':
        'name': 'enclosure.group.open.cpp'
    'end': '(\\))(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?'
    'endCaptures':
      '1':
        'name': 'enclosure.group.close.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'keyword.qualifier.cpp'
    'name': 'function.declaration.primitive.cpp'
    'patterns': [
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'keyword.qualifier.cpp'
          '6':
            'name': 'type.primitive.cpp'
          '7':
            'name': 'keyword.qualifier.cpp'
          '8':
            'name': 'operator.character.cpp'
          '9':
            'name': 'variable.argument.input.cpp'
        'name': 'function.argument.primitive.cpp'
      }
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp'
        'end': '(?<=[\\&\\*\\s])\\b(\\w+)\\b'
        'endCaptures':
          '1':
            'name': 'variable.argument.input.cpp'
        'name': 'function.argument.qualified.cpp'
        'patterns': [
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'enclosure.generic.open.cpp'
            'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'endCaptures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
            'patterns': [
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
              {
                'match': '\\,'
                'name': 'operator.character.separator.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
        'captures':
          '0':
            'name': 'function.argument.simple.cpp'
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
          '8':
            'name': 'variable.argument.input.cpp'
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
      }
      {
        'match': '\\,'
        'name': 'operator.character.separator.cpp'
      }
    ]
  }
  {
    'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(\\w+)(\\:\\:)'
    'beginCaptures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'type.name.cpp'
      '6':
        'name': 'operator.character.resolution.cpp'
    'end': '(?<=[\\;\\{\\:])|(\\;)|(\\{)|(?:(\\:)(?![\\:]))'
    'endCaptures':
      '1':
        'name': 'operator.character.line-terminator.cpp'
      '2':
        'name': 'enclosure.block.open.cpp'
      '3':
        'name': 'operator.character.initializer.cpp'
    'name': 'function.declaration.qualified.cpp'
    'patterns': [
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp;.cpp'
      }
      {
        'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?\\s*\\b(\\w+)\\b(\\<)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'enclosure.generic.open.cpp'
        'end': '(\\;)|(\\{)|(\\()'
        'endCaptures':
          '1':
            'name': 'operator.character.line-terminator.cpp'
          '2':
            'name': 'enclosure.block.open.cpp'
          '3':
            'name': 'enclosure.group.open.cpp'
        'name': 'function.declaration.generic.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'variable.argument.generic.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
          {
            'begin': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*(?:\\b(\\w+)\\b(\\:\\:))?\\b(\\w+)\\b\\s*(\\()\\s*'
            'beginCaptures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
              '4':
                'name': 'type.name.cpp'
              '5':
                'name': 'operator.character.resolution.cpp'
              '6':
                'name': 'function.name.cpp'
              '7':
                'name': 'enclosure.group.open.cpp'
            'end': '(\\))(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?'
            'endCaptures':
              '1':
                'name': 'enclosure.group.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'keyword.qualifier.cpp'
            'patterns': [
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'keyword.qualifier.cpp'
                  '6':
                    'name': 'type.primitive.cpp'
                  '7':
                    'name': 'keyword.qualifier.cpp'
                  '8':
                    'name': 'operator.character.cpp'
                  '9':
                    'name': 'variable.argument.input.cpp'
                'name': 'function.argument.input.cpp'
              }
              {
                'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'beginCaptures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp'
                'end': '(?<=[\\&\\*\\s])\\b(\\w+)\\b'
                'endCaptures':
                  '1':
                    'name': 'variable.argument.input.cpp'
                'name': 'function.argument.input.cpp'
                'patterns': [
                  {
                    'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
                    'beginCaptures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'type.name.cpp'
                      '6':
                        'name': 'enclosure.generic.open.cpp'
                    'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                    'endCaptures':
                      '1':
                        'name': 'enclosure.generic.close.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'operator.character.cpp'
                    'patterns': [
                      {
                        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                        'captures':
                          '1':
                            'name': 'keyword.qualifier.cpp'
                          '2':
                            'name': 'keyword.qualifier.cpp'
                          '3':
                            'name': 'keyword.qualifier.cpp'
                          '4':
                            'name': 'keyword.qualifier.cpp'
                          '5':
                            'name': 'variable.argument.generic.cpp'
                          '6':
                            'name': 'operator.character.resolution.cpp;.cpp'
                      }
                      {
                        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                        'captures':
                          '1':
                            'name': 'keyword.qualifier.cpp'
                          '2':
                            'name': 'keyword.qualifier.cpp'
                          '3':
                            'name': 'keyword.qualifier.cpp'
                          '4':
                            'name': 'keyword.qualifier.cpp'
                          '5':
                            'name': 'variable.argument.generic.cpp'
                          '6':
                            'name': 'keyword.qualifier.cpp'
                          '7':
                            'name': 'operator.character.cpp'
                      }
                      {
                        'match': '\\,'
                        'name': 'operator.character.separator.cpp'
                      }
                    ]
                  }
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'type.name.cpp'
                      '6':
                        'name': 'operator.character.resolution.cpp;.cpp'
                  }
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'type.name.cpp'
                      '6':
                        'name': 'keyword.qualifier.cpp'
                      '7':
                        'name': 'operator.character.cpp'
                  }
                ]
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
                'captures':
                  '0':
                    'name': 'function.argument.input.cpp'
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
                  '8':
                    'name': 'variable.argument.input.cpp'
              }
              {
                'match': '\\,'
                'name': 'operator.character.separator.cpp'
              }
            ]
          }
          {
            'match': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b\\s*'
            'captures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
              '4':
                'name': 'variable.name.cpp'
          }
          {
            'match': '(\\>)(\\:\\:)(\\w+)\\s*(\\w+)'
            'captures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'operator.character.resolution.cpp'
              '3':
                'name': 'type.name.cpp'
              '4':
                'name': 'variable.name.cpp'
          }
          {
            'match': '(\\>)(\\:\\:)(\\w+)'
            'captures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'operator.character.resolution.cpp'
              '3':
                'name': 'type.name.cpp'
          }
          {
            'match': '(\\>)'
            'name': 'enclosure.generic.close.cpp'
          }
        ]
      }
      {
        'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*(?:\\b(\\w+)\\b(\\:\\:))?\\b(\\w+)\\b\\s*(\\()\\s*'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
          '8':
            'name': 'type.name.cpp'
          '9':
            'name': 'operator.character.resolution.cpp'
          '10':
            'name': 'function.name.cpp'
          '11':
            'name': 'enclosure.group.open.cpp'
        'end': '(\\))(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?'
        'endCaptures':
          '1':
            'name': 'enclosure.group.close.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'keyword.qualifier.cpp'
        'name': 'function.declaration.simple.cpp'
        'patterns': [
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'keyword.qualifier.cpp'
              '6':
                'name': 'type.primitive.cpp'
              '7':
                'name': 'keyword.qualifier.cpp'
              '8':
                'name': 'operator.character.cpp'
              '9':
                'name': 'variable.argument.input.cpp'
            'name': 'function.argument.input.cpp'
          }
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp'
            'end': '(?<=[\\&\\*\\s])\\b(\\w+)\\b'
            'endCaptures':
              '1':
                'name': 'variable.argument.input.cpp'
            'name': 'function.argument.input.cpp'
            'patterns': [
              {
                'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
                'beginCaptures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'enclosure.generic.open.cpp'
                'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'endCaptures':
                  '1':
                    'name': 'enclosure.generic.close.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'operator.character.cpp'
                'patterns': [
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'variable.argument.generic.cpp'
                      '6':
                        'name': 'operator.character.resolution.cpp;.cpp'
                  }
                  {
                    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                    'captures':
                      '1':
                        'name': 'keyword.qualifier.cpp'
                      '2':
                        'name': 'keyword.qualifier.cpp'
                      '3':
                        'name': 'keyword.qualifier.cpp'
                      '4':
                        'name': 'keyword.qualifier.cpp'
                      '5':
                        'name': 'variable.argument.generic.cpp'
                      '6':
                        'name': 'keyword.qualifier.cpp'
                      '7':
                        'name': 'operator.character.cpp'
                  }
                  {
                    'match': '\\,'
                    'name': 'operator.character.separator.cpp'
                  }
                ]
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'type.name.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
            'captures':
              '0':
                'name': 'function.argument.input.cpp'
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
              '8':
                'name': 'variable.argument.input.cpp'
          }
          {
            'match': '\\,'
            'name': 'operator.character.separator.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
        'captures':
          '0':
            'name': 'variable.declaration.simple.cpp'
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
          '8':
            'name': 'variable.name.cpp'
      }
    ]
  }
  {
    'begin': '(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(?:\\b(const|constexpr|explicit|extern|inline|static|virtual)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*(?:\\b(\\w+)\\b(\\:\\:))?\\b(\\w+)\\b\\s*(\\()\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'type.name.cpp'
      '6':
        'name': 'keyword.qualifier.cpp'
      '7':
        'name': 'operator.character.cpp'
      '8':
        'name': 'type.name.cpp'
      '9':
        'name': 'operator.character.resolution.cpp'
      '10':
        'name': 'function.name.cpp'
      '11':
        'name': 'enclosure.group.open.cpp'
    'end': '(\\))(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?(?:\\s+(const|final|override))?'
    'endCaptures':
      '1':
        'name': 'enclosure.group.close.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'keyword.qualifier.cpp'
    'name': 'function.declaration.simple.cpp'
    'patterns': [
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
        'captures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'keyword.qualifier.cpp'
          '6':
            'name': 'type.primitive.cpp'
          '7':
            'name': 'keyword.qualifier.cpp'
          '8':
            'name': 'operator.character.cpp'
          '9':
            'name': 'variable.argument.input.cpp'
        'name': 'function.argument.input.cpp'
      }
      {
        'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
        'beginCaptures':
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'operator.character.resolution.cpp'
        'end': '(?<=[\\&\\*\\s])\\b(\\w+)\\b'
        'endCaptures':
          '1':
            'name': 'variable.argument.input.cpp'
        'name': 'function.argument.input.cpp'
        'patterns': [
          {
            'begin': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?\\s*\\b(\\w+)\\b\\s*(\\<)'
            'beginCaptures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'enclosure.generic.open.cpp'
            'end': '(\\>)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'endCaptures':
              '1':
                'name': 'enclosure.generic.close.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'operator.character.cpp'
            'patterns': [
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'operator.character.resolution.cpp;.cpp'
              }
              {
                'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
                'captures':
                  '1':
                    'name': 'keyword.qualifier.cpp'
                  '2':
                    'name': 'keyword.qualifier.cpp'
                  '3':
                    'name': 'keyword.qualifier.cpp'
                  '4':
                    'name': 'keyword.qualifier.cpp'
                  '5':
                    'name': 'variable.argument.generic.cpp'
                  '6':
                    'name': 'keyword.qualifier.cpp'
                  '7':
                    'name': 'operator.character.cpp'
              }
              {
                'match': '\\,'
                'name': 'operator.character.separator.cpp'
              }
            ]
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(\\:\\:)'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'operator.character.resolution.cpp;.cpp'
          }
          {
            'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?'
            'captures':
              '1':
                'name': 'keyword.qualifier.cpp'
              '2':
                'name': 'keyword.qualifier.cpp'
              '3':
                'name': 'keyword.qualifier.cpp'
              '4':
                'name': 'keyword.qualifier.cpp'
              '5':
                'name': 'type.name.cpp'
              '6':
                'name': 'keyword.qualifier.cpp'
              '7':
                'name': 'operator.character.cpp'
          }
        ]
      }
      {
        'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
        'captures':
          '0':
            'name': 'function.argument.input.cpp'
          '1':
            'name': 'keyword.qualifier.cpp'
          '2':
            'name': 'keyword.qualifier.cpp'
          '3':
            'name': 'keyword.qualifier.cpp'
          '4':
            'name': 'keyword.qualifier.cpp'
          '5':
            'name': 'type.name.cpp'
          '6':
            'name': 'keyword.qualifier.cpp'
          '7':
            'name': 'operator.character.cpp'
          '8':
            'name': 'variable.argument.input.cpp'
      }
      {
        'match': '\\,'
        'name': 'operator.character.separator.cpp'
      }
    ]
  }
  {
    'match': '(operator)\\s+(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b'
    'captures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'keyword.qualifier.cpp'
      '6':
        'name': 'keyword.qualifier.cpp'
      '7':
        'name': 'type.primitive.cpp'
      '8':
        'name': 'keyword.qualifier.cpp'
      '9':
        'name': 'operator.character.cpp'
      '10':
        'name': 'keyword.qualifier.cpp'
      '11':
        'name': 'operator.character.cpp'
  }
  {
    'match': '(operator)\\s+(\\w+)'
    'captures':
      '1':
        'name': 'keyword.type.cpp'
      '2':
        'name': 'type.name.cpp'
  }
  {
    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(long|short|signed|unsigned)\\b\\s+)?\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b(?!\\:)'
    'captures':
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'keyword.qualifier.cpp'
      '6':
        'name': 'type.primitive.cpp'
      '7':
        'name': 'keyword.qualifier.cpp'
      '8':
        'name': 'operator.character.cpp'
      '9':
        'name': 'variable.name.cpp'
    'name': 'variable.declaration.primitive.cpp'
  }
  {
    'match': '(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(?:\\b(const|extern|mutable|static|volatile)\\b\\s+)?(\\w+)(?:(?:\\b(const)\\b)?(?:\\s*([\\&\\*]+)))?\\s*\\b(\\w+)\\b'
    'captures':
      '0':
        'name': 'variable.declaration.simple.cpp'
      '1':
        'name': 'keyword.qualifier.cpp'
      '2':
        'name': 'keyword.qualifier.cpp'
      '3':
        'name': 'keyword.qualifier.cpp'
      '4':
        'name': 'keyword.qualifier.cpp'
      '5':
        'name': 'type.name.cpp'
      '6':
        'name': 'keyword.qualifier.cpp'
      '7':
        'name': 'operator.character.cpp'
      '8':
        'name': 'variable.name.cpp'
  }
  {
    'match': '\\b(class|enum|namespace|operator|struct|template|typedef|typename|union)\\b'
    'name': 'keyword.type.cpp'
  }
  {
    'match': '\\b(break|case|catch|continue|default|else|for|if|return|switch|this|throw|try|using|while)\\b'
    'name': 'keyword.control.cpp'
  }
  {
    'match': '\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b'
    'name': 'type.primitive.cpp'
  }
  {
    'match': '\\b(const|constexpr|extern|explicit|final|friend|inline|mutable|override|private|protected|public|signed|static|unsigned|virtual|volatile)\\b'
    'name': 'keyword.qualifier.cpp'
  }
  {
    'match': '(\\,|\\;|\\?|\\~|\\.|\\.\\*|\\:|\\:\\:|\\^|\\^\\=|\\%|\\%\\=|\\=|\\=\\=|\\!|\\!\\=|\\*|\\*\\=|/|/\\=|\\&|\\&\\=|\\&\\&|\\||\\|\\=|\\|\\||\\+|\\+\\=|\\+\\+|\\-|\\-\\=|\\-\\-|\\>|\\>\\=|\\>\\>|\\>\\>\\=|\\<|\\<\\=|\\<\\<|\\<\\<\\=|\\-\\>|\\-\\>\\*)'
    'name': 'operator.character.cpp'
  }
  {
    'match': '\\['
    'name': 'enclosure.index.open.cpp'
  }
  {
    'match': '\\]'
    'name': 'enclosure.index.close.cpp'
  }
  {
    'match': '\\('
    'name': 'enclosure.group.open.cpp'
  }
  {
    'match': '\\)'
    'name': 'enclosure.group.close.cpp'
  }
  {
    'match': '\\{'
    'name': 'enclosure.block.open.cpp'
  }
  {
    'match': '\\}'
    'name': 'enclosure.block.close.cpp'
  }
]