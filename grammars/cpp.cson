'fileTypes': [
  'c'
  'cpp'
  'cxx'
  'h'
  'hpp'
]
'name': 'C++'
'scopeName': 'source.cpp'
'patterns': [
  {
    'match': '^\\s*\\#\\s*(?:define)\\s+(\\w+)'
    'captures':
      '0':
        'name': 'preprocessor.define.cpp'
      '1':
        'name': 'preprocessor.define.name.cpp'
  }
  {
    'match': '^\\s*\\#\\s*(?:include)\\s+(?:([\\"\\\'][^\\\'\\"]+[\\"\\\'])|(\\<[^\\>]+\\>))'
    'captures':
      '0':
        'name': 'preprocessor.include.cpp'
      '1':
        'name': 'preprocessor.include.file.local.cpp'
      '2':
        'name': 'preprocessor.include.file.global.cpp'
  }
  {
    'match': '^\\s*\\#\\s*\\w+'
    'name': 'preprocessor.directive.cpp'
  }
  {
    'match': '(/\\*\\*)(.*)(\\*\\*/)\\r?\\n'
    'captures':
      '1':
        'name': 'comment.section.open.cpp'
      '2':
        'name': 'comment.section.title.cpp'
      '3':
        'name': 'comment.section.close.cpp'
    'name': 'comment.section.cpp'
  }
  {
    'begin': '(/\\*)\\s*([A-Z0-9_]+)\\s*(?=\\-)'
    'beginCaptures':
      '1':
        'name': 'comment.documentation.open.cpp'
      '2':
        'name': 'comment.documentation.title.cpp'
    'contentName': 'comment.documentation.content.cpp'
    'end': '\\*/'
    'endCaptures':
      '0':
        'name': 'comment.documentation.close.cpp'
    'patterns': [
      {
        'match': 'SYNTAX'
        'name': 'comment.documentation.syntax.cpp'
      }
      {
        'match': 'OUTPUT[S]?'
        'name': 'comment.documentation.output.cpp'
      }
      {
        'match': 'INPUT[S]?'
        'name': 'comment.documentation.input.cpp'
      }
      {
        'match': 'PROPERTY|PROPERTIES'
        'name': 'comment.documentation.properties.cpp'
      }
    ]
  }
  {
    'begin': '(/\\*)'
    'beginCaptures':
      '1':
        'name': 'comment.block.open.cpp'
    'end': '\\*/'
    'endCaptures':
      '0':
        'name': 'comment.block.close.cpp'
    'contentName': 'comment.block.content.cpp'
    'name': 'comment.block.cpp'
  }
  {
    'match': '(//)(.*)\\r?\\n'
    'captures':
      '1':
        'name': 'comment.line.open.cpp'
      '2':
        'name': 'comment.line.content.cpp'
    'name': 'comment.line.cpp'
  }
  {
    'match': '\\b(false|true)\\b'
    'name': 'literal.boolean.cpp'
  }
  {
    'match': '\\b(\\d*\\.\\d+(?:[eE][\\+\\-]?\\d+)?[lL]?)\\b'
    'captures':
      '1':
        'name': 'literal.float.double.cpp'
  }
  {
    'match': '\\b(\\d*\\.\\d+(?:[eE][\\+\\-]?\\d+)?[fF])\\b'
    'captures':
      '1':
        'name': 'literal.float.single.cpp'
  }
  {
    'match': '\\b(0[xX](?:[0-9]|[a-f]|[A-F])+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.hexadecimal.cpp'
  }
  {
    'match': '\\b(\\d+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.decimal.cpp'
  }
  {
    'match': '\\b(0[0-9]+[lLuU]*)\\b'
    'captures':
      '1':
        'name': 'literal.integer.octal.cpp'
  }
  {
    'begin': '(?<![^\\\\]\\\\)(\\\')'
    'beginCaptures':
      '1':
        'name': 'enclosure.character.open.cpp'
    'contentName': 'literal.character.content.cpp'
    'end': '(?<![^\\\\]\\\\)(\\\')'
    'endCaptures':
      '0':
        'name': 'enclosure.character.close.cpp'
    'name': 'literal.character.cpp'
  }
  {
    'begin': '(L|u8|u|U)?(?<![^\\\\]\\\\)(\\")'
    'beginCaptures':
      '1':
        'name': 'literal.string.qualifier.cpp'
      '2':
        'name': 'enclosure.string.open.cpp'
    'contentName': 'literal.string.content.cpp'
    'end': '(?<![^\\\\]\\\\)(\\")'
    'endCaptures':
      '0':
        'name': 'enclosure.string.close.cpp'
    'name': 'literal.string.cpp'
  }
  {
    'match': '\\b(class|enum|namespace|operator|struct|template|typedef|typename|union)\\b'
    'name': 'keyword.type.cpp'
  }
  {
    'match': '\\b(break|case|catch|continue|default|else|for|if|return|switch|this|throw|try|using|while)\\b'
    'name': 'keyword.control.cpp'
  }
  {
    'match': '\\b(alignof|delete|new|sizeof|typeid)\\b'
    'name': 'keyword.operator.cpp'
  }
  {
    'match': '\\b(auto|bool|char|double|float|int|long|nullptr|short|string|uchar|uint|ulong|void)\\b'
    'name': 'type.primitive.cpp'
  }
  {
    'match': '\\b(const|constexpr|extern|explicit|final|friend|inline|mutable|override|private|protected|public|signed|static|unsigned|virtual|volatile)\\b'
    'name': 'keyword.qualifier.cpp'
  }
  {
    'match': '(\\,|\\;|\\?|\\~|\\.|\\.\\*|\\:|\\:\\:|\\^|\\^\\=|\\%|\\%\\=|\\=|\\=\\=|\\!|\\!\\=|\\*|\\*\\=|/|/\\=|\\&|\\&\\=|\\&\\&|\\||\\|\\=|\\|\\||\\+|\\+\\=|\\+\\+|\\-|\\-\\=|\\-\\-|\\>|\\>\\=|\\>\\>|\\>\\>\\=|\\<|\\<\\=|\\<\\<|\\<\\<\\=|\\-\\>|\\-\\>\\*)'
    'name': 'operator.character.cpp'
  }
  {
    'match': '\\['
    'name': 'enclosure.index.open.cpp'
  }
  {
    'match': '\\]'
    'name': 'enclosure.index.close.cpp'
  }
  {
    'match': '\\('
    'name': 'enclosure.group.open.cpp'
  }
  {
    'match': '\\)'
    'name': 'enclosure.group.close.cpp'
  }
  {
    'match': '\\{'
    'name': 'enclosure.block.open.cpp'
  }
  {
    'match': '\\}'
    'name': 'enclosure.block.close.cpp'
  }
]